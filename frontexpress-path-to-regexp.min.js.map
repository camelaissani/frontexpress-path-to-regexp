{"version":3,"file":"frontexpress-path-to-regexp.min.js","sources":["node_modules/path-to-regexp/index.js","node_modules/isarray/index.js","index.js"],"sourcesContent":["var isarray = require('isarray')\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = options && options.delimiter || '/'\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    var next = str[index]\n    var prefix = res[2]\n    var name = res[3]\n    var capture = res[4]\n    var group = res[5]\n    var modifier = res[6]\n    var asterisk = res[7]\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    var partial = prefix != null && next != null && next !== prefix\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = res[2] || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (obj, opts) {\n    var path = ''\n    var data = obj || {}\n    var options = opts || {}\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      var value = data[token.name]\n      var segment\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      })\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'\n  }\n\n  if (end) {\n    route += '$'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n","module.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n","import pathToRegexp from 'path-to-regexp';\n\nexport default {\n    name: 'frontexpress-path-to-regexp',\n    plugin(application) {\n        const decodeParmeterValue = (encodedValue) => {\n            const v = decodeURI(encodedValue);\n            return !isNaN(parseFloat(v)) && isFinite(v) ? (Number.isInteger(v) ? Number.parseInt(v, 10) : Number.parseFloat(v)) : v;\n        };\n\n        // change the route matcher setting of application\n        application.set('route matcher', (request, route) => {\n\n            // check if http method are equals\n            if (route.method && route.method !== request.method) {\n                return false;\n            }\n\n            // route and uri not defined always match\n            if (!route.uri || !request.uri) {\n                return true;\n            }\n\n            //remove query string and anchor from uri to test\n            const match = /^(.*)\\?.*#.*|(.*)(?=\\?|#)|(.*[^\\?#])$/.exec(request.uri);\n            const baseUriToCheck = match[1] || match[2] || match[3];\n\n            // route path to regexp;\n            const keys = [];\n            const re = pathToRegexp(route.uri, keys);\n\n            // check request path against route regexp\n            const routeMatch = baseUriToCheck.match(re);\n            if (!routeMatch) {\n                return false;\n            }\n\n            // update params in request with keys\n            request.params = Object.assign(request.params, keys.reduce((acc, key, index) => {\n                let value = routeMatch[index + 1];\n                if (value) {\n                    value = value.indexOf(',') !== -1 ? value.split(',').map(v => decodeParmeterValue(v)) : value = decodeParmeterValue(value);\n                }\n                acc[key.name] = value;\n                return acc;\n            }, {}));\n\n            return true;\n        });\n    }\n};"],"names":["parse","str","options","res","tokens","key","index","path","defaultDelimiter","delimiter","PATH_REGEXP","exec","m","escaped","offset","slice","length","next","prefix","name","capture","group","modifier","asterisk","push","partial","repeat","optional","pattern","escapeGroup","escapeString","substr","encodeURIComponentPretty","encodeURI","replace","c","charCodeAt","toString","toUpperCase","encodeAsterisk","tokensToFunction","matches","Array","i","babelHelpers.typeof","RegExp","obj","opts","data","encode","pretty","encodeURIComponent","token","segment","value","TypeError","isarray","JSON","stringify","j","test","attachKeys","re","keys","flags","sensitive","regexpToRegexp","groups","source","match","arrayToRegexp","parts","pathToRegexp","join","stringToRegexp","tokensToRegExp","strict","end","route","endsWithDelimiter","isArray","arr","Object","prototype","call","application","decodeParmeterValue","encodedValue","v","decodeURI","isNaN","parseFloat","isFinite","Number","isInteger","parseInt","set","request","method","uri","baseUriToCheck","routeMatch","params","assign","reduce","acc","indexOf","split","map"],"mappings":"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"}